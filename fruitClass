fruitClass (inherits from class food)
  classfields:
    type (String)
    numberOfPieces (Integer)
    useByDate (Date)
 
  SUBMODULE Default Constructor
  IMPORT: NONE
  EXPORT: NONE
    type = "abc"
    numberOfPieces = 1
    useByDate = today's date
 
  SUBMODULE Alternate Constructor
  IMPORT: inName, inType, inNumberOfPieces, inStorageTemp, inUseByDate, inPackaging
  EXPORT: NONE
    comment: send all super values to the alternate Constructor
    super<-- inName, inType, inNumberOfPieces, inStorageTemp, inUseByDate, inPackaging
    setType<-- inType
    setNumberOfPieces <-- inNumberOfPieces
    setUseByDate <-- inUseByDate
  END SUBMODULE

  SUBMODULE Copy Constructor
  IMPORT: inFruit
  EXPORT: NONE
    super <-- inFruit
    type = inFruit.getType
    numberOfPieces = inFruit.getNumberOfPieces
    useByDate = inFruit.getUseByDate
  END SUBMODULE

  SUBMODULE clone
  IMPORT: NONE
  EXPORT: fruit
    create new fruit <-- inType, inNumberOfPieces, inUseByDate
  END SUBMODULE
  
  SUBMODULE getType
  IMPORT: NONE
  EXPORT: type
    export type
  END SUBMODULE

  SUBMODULE getNumberOfPieces
  IMPORT: NONE
  EXPORT: numberOfPieces
    export numberOfPieces
  END SUBMODULE
 
  SUBMODULE getUsebyDate
  IMPORT: NONE
  EXPORT: numberOfPieces
    export numberOfPieces
  END SUBMODULE

  SUBMODULE setType
  IMPORT: inType
  EXPORT: NONE
    IF inType = "" THEN
      (THROW ILLEGAL ARGUMENT EXCEPTION)
    END IF
    IF inType = NULL THEN
      (THROW ILLEGAL ARGUMENT EXCEPTION)
    END IF
    type = inType
  END SUBMODULE

  SUBMODULE setNumberOfPieces
  IMPORT: inNumberOfPieces
  EXPORT: NONE
    IF inNumberOfPieces <= 0 THEN
      (THROW ILLEGAL ARGUMENT EXCEPTION)
    END IF
    IF inNumberOfPieces < 1 OR inNumberOfPieces > 20 THEN 
      (THROW ILLEGAL ARGUMENT EXCEPTION)
    END IF
    numberOfPieces = inNumberOfPieces
  END SUBMODULE

  SUBMODULE: setUseByDate
  IMPORT: inUseByDate
  EXPORT: NONE
    usebyDate = inUseByDate
  END SUBMODULE

  SUBMODULE equals
  IMPORT: inObject
  EXPORT: isEqual (Boolean)
    isEqual = false
    IF inObject is really a fruitClass named inFruit THEN
      make inObject to a fruitClass named inFruit
        IF type = inFruit.getType<-- NONE THEN
          IF fruit = inFruit.getNumberOfPieces <-- NONE THEN
            IF usebyDate = inFruit.getUseByDate<-- NONE THEN
              isEqual = true
            END IF
          END IF
        END IF
    END IF
  END SUBMODULE

  SUBMODULE toString
  IMPORT: NONE
  EXPORT: state of the fruitClass in the form of a string
     meatString  = ("Fruit,  " + + "," + super.getName + "," +  type  + "," + numberOfPieces  "," + super.getStorageTemp + "," + useByDate + "," +  super.getPackaging)
  END SUBMODULE

  SUBMODULE calcExpiry
  IMPORT: today (Date)
  EXPORT: isExpired
    isExpired = false
    IF usebyDate is after today's date THEN
      isExpired = true
    END IF
  END SUBMODULE

