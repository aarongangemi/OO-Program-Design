grainClass (inherits from class food)
  classfields:
    type (String)
    volume (Real)
    bestBeforeDate (Date)
  
  SUBMODULE Default Constructor
  IMPORT: NONE
  EXPORT: NONE
      type = "abc"
      volume = 2.0
      bestBeforeDate = today's date
  END SUBMODULE

  SUBMODULE Alternate Constructor
  IMPORT: inName, inType, inVolume, inStorageTemp, inBestBeforeDate, inPackaging
  EXPORT: NONE
    comment: send all super values to alternate super constructor
    super <-- inName, inType, inVolume, inStorageTemp, inBestBeforeDate, inPackaging
    setType <-- inType
    setWeight <-- inVolume
    setBestBeforeDate <-- inBestBeforeDate
  END SUBMODULE

  SUBMODULE Copy Constructor
  IMPORT: inGrain
  EXPORT: NONE
    super <-- inGrain
    type = grainClass.getType
    volume = grainClass.getVolume
    bestBeforeDate = grainClass.getBestBeforeDate
  END SUBMODULE

  SUBMODULE clone
  IMPORT: NONE
  EXPORT: grain
    create new grain <-- inType, inVolume, inBestBeforeDate
  END SUBMODULE
  
  SUBMODULE getType
   IMPORT: NONE
   EXPORT: type
     export type
  END SUBMODULE

  SUBMODULE getVolume
  IMPORT: NONE
  EXPORT: volume
    export volume
  END SUBMODULE
 
  SUBMODULE getBestBeforeDate
  IMPORT: NONE
  EXPORT: bestBeforeDate
    export bestBeforeDate
  END SUBMODULE

  SUBMODULE setType
  IMPORT: inType
  EXPORT: NONE
    IF inType = "" THEN
      (THROW ILLEGAL ARGUMENT EXCEPTION)
    END IF
    IF inType = null THEN
      (THROW ILLEGAL ARGUMENT EXCEPTION)
    END IF
    type = inType
  END SUBMODULE
  
  SUBMODULE setVolume
  IMPORT: inVolume
  EXPORT: NONE
    IF inVolume < 0 THEN
      (THROW illegal argument exception)
    END IF
    IF inVolume < 0.2 OR inVolume > 0.5 THEN
      (THROW illegal argument exception)
    END IF
    volume = inVolume
  END SUBMODULE

  SUBMODULE setBestBeforeDate
  IMPORT: inBestBeforeDate
  EXPORT: NONE
    bestBeforeDate = inBestBeforeDate
  END SUBMODULE

  SUBMODULE equals
  IMPORT: inObject
  EXPORT isEquals
    isEqual = false
    IF inObject is really a grainClass named inGrain THEN
      make inObject to a grainClass name inGrain
        IF type = inGrain.getType <-- NONE THEN
          IF volume = inGrain.getVolume <-- NONE THEN
            IF bestBeforeDate = inGrain.getBestBeforeDate  
              isEquals = true
            END IF
          END IF
        END IF
    END IF
  END SUBMODULE

  SUBMODULE toString
  IMPORT: NONE
  EXPORT: state of the grainClass in the form of a string
    grainString  = ("Grain, " + super.getName + "," + type + "," + volume + "," + storageTemp + "," +  bestBeforeDate + "," + packaging)
  END SUBMODULE

 SUBMODULE calcExpiry
  IMPORT: today
  EXPORT isExpired (Boolean)
    isExpired = false
    IF bestbeforeDate is after today's date THEN
      isExpired = true
    END IF
  END SUBMODULE

