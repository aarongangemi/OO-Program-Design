Class Storage
  classfields
    storageArray (LENGTH OF 3) (2D ARRAY OF food)
    fridgeCount (Integer)
    freezerCount (Integer)
    pantryCount (Integer)

  SUBMODULE Default Constructor
  IMPORT: NONE
  EXPORT: NONE
    comment: storageArray is an Array of type food
    storageArray = new Array of type FoodClass [0][0] 
    fridgeCount = 0
    freezerCount = 0
    pantryCount = 0
  END SUBMODULE`

  SUBMODULE Alternate Constructor
  IMPORT: inStorageArray, inFridgeCapacity, inFreezerCapacity, inPantryCapacity
  EXPORT: NONE
    storageArray (2D ARRAY OF FoodClass) (LENGTH OF 3)
    storageArray[0] = FoodClass[fridgeCapacity]
    storageArray[1] = FoodClass[freezerCapacity]
    storageArray[2] = FoodClass[pantryCapacity]
    fridgeCount = 0
    freezerCount = 0
    pantryCount = 0
  END SUBMODULE

  SUBMODULE Copy Constructor
  IMPORT: inStorage
  EXPORT: NONE
    storageArray = inStorageClass.getStorageArray<-- NONE
    fridgeCount = inStorageClass.getFridgeCount <-- NONE
    freezerCapacity = inStorageClass.getFreezerCount <-- NONE
    pantryCapacity = inStorageClass.getPantryCount <-- NONE
  END SUBMODULE

  SUBMODULE clone
  IMPORT: NONE
  EXPORT: outStorageArray
    create new storageArray <-- inStorageArray, inFridgeCount, inFreezerCount, inPantryCount
  END SUBMODULE
  
  SUBMODULE getStorageArray
  IMPORT: NONE
  EXPORT: storageArray
    export storageArray
  END SUBMODULE

  SUBMODULE getFridgeCount
  IMPORT: NONE
  EXPORT: fridgeCount
    export fridgeCount
  END SUBMODULE

  SUBMODULE getFreezerCount
  IMPORT: NONE
  EXPORT: freezerCount
    export freezerCount
  END SUBMODULE

  SUBMODULE getPantryCapacity
  IMPORT: NONE
  EXPORT: pantryCount
    export pantryCount
  END SUBMODULE

  SUBMODULE setStorageArray
  IMPORT: inStorageArray
  EXPORT: NONE
    storageArray = inStorageArray
  END SUBMODULE
  
  SUBMODULE setFridgeCount
  IMPORT: inFridgeCount
  EXPORT: NONE
    IF inFridgeCount < 0 THEN
      (THROW illegal argument exception)
    END IF
    fridgeCapacity = inFridgeCapacty
  END SUBMODULE
 
  SUBMODULE setFreezerCount
  IMPORT: inFreezerCapacity
  EXPORT: NONE
    IF inFreezerCount < 0 THEN 
      (THROW illegal argument exception)
    END IF
  freezerCount = inFreezerCount
  END SUBMODULE

  SUBMODULE setPantryCount
  IMPORT: inPantryCount
  EXPORT: NONE
    IF inPantryCount < 0 THEN 
      (THROW illegal argument exception)
    END IF
  pantryCapacity = inPantryCapacity
  END SUBMODULE
    
  SUBMODULE equals
  IMPORT: inObject
  EXPORT: isEqual (Boolean)
    isEqual = true
    IF inObject is an instance of StorageClass THEN
      Convert inObject to type StorageClass
      IF storageArray[0].length != storage.getStorageArray<-- NONE[0].length
                                      OR
         storageArray[1].length != storage.getStorageArray<--NONE[1].length
                                      OR
         storageArray[2].length != storage.getStorageArray<--NONE[2].length
         
        isEqual = false
      END IF
      IF isEqual = true THEN
        IF fridgeCount != storage.getFridgeCount<-- NONE
                                 OR
           freezerCount != storage.getFreezerCount<-- NONE
                                 OR
           pantryCount != storage.getPantryCount<-- NONE
        
          isEqual = false
        END IF
      END IF
    
      IF isEqual = true
        FOR i = 0 to fridgeCount (exclusive) changeby 1 DO
          IF !storageArray[0][i] EQUALS storage.getStorageArray<-- NONE [0][i]
            isEqual = false
          END IF
        END FOR
      END IF

      IF isEqual = true
        FOR i = 0 to freezerCount (exclusive) changeby 1 DO
          IF !storageArray[1][i] EQUALS storage.getStorageArray<-- NONE [1][i]
            isEqual = false
          END IF
        END FOR
      END IF

      IF isEqual = true
        FOR i = 0 to pantryCount (exclusive) changeby 1 DO
          IF !storageArray[2][i] EQUALS storage.getStorageArray<-- NONE [2][i]
            isEqual = false
          END IF
        END FOR
      END IF
    ELSE
      isEqual = false
    END IF
  END SUBMODULE
   
  SUBMODULE toString
  IMPORT: NONE
  EXPORT: state of the storageClass in the form of a string
    storageString = ("Pantry has " + pantryCapacity + "," + "fridge has" + fridgeCapacity + "," + "Freezer has " + freezerCapacity)
  END SUBMODULE

  SUBMODULE findExpired
  IMPORT: NONE
  EXPORT: NONE
    today = today's date
    Remove time from today's Date 
    FOR i = 0 to fridgeCount (exclusive) changeby 1 DO
      IF storageArray[0][i].calcExpiry<-- today
        OUTPUT("Location: Fridge")
        OUTPUT(storageArray[0][i])
      END IF
    END FOR
    FOR i = 0 to freezerCount (exclusive) changeby 1 DO
      IF storageArray[0][i].calcExpiry<-- today
        OUTPUT("Location: Freezer")
        OUTPUT(storageArray[0][i])
      END IF
    END FOR
    FOR i = 0 to pantryCount (exclusive) changeby 1 DO
      IF storageArray[2][i].calcExpiry<-- today
        OUTPUT("Location: Pantry")
        OUTPUT(storageArray[2][i])
      END IF
    END FOR
  END SUBMODULE

  SUBMODULE removeItem
  IMPORT: location, itemNumber
  EXPORT: NONE
    IF location = 1 AND itemNumber <= fridgeCount AND itemNumber > 0 AND fridgeCount > 0
      FOR i = itemNumber to (fridgeCount - 1) (exclusive) changeby 1 DO
        storageArray[0][i] = storageArray[0][i+1]
      END FOR
      fridgeCount = fridgeCount - 1
    ELSE IF

    IF location = 2 AND itemNumber <= freezerCount AND itemNumber > 0 AND freezerCount > 0
      FOR i = itemNumber to (freezerCount - 1) (exclusive) changeby 1 DO
        storageArray[1][i] = storageArray[1][i+1]
      END FOR
      freezerCount = freezerCount - 1
    ELSE IF

    IF location = 3 AND itemNumber <= pantryCount AND itemNumber > 0 AND pantryCount > 0
      FOR i = itemNumber to (pantryCount - 1) (exclusive) changeby 1 DO
        storageArray[2][i] = storageArray[2][i+1]
      END FOR
      pantryCount = pantryCount - 1
    ELSE IF
  END SUBMODULE

  SUBMODULE addFood
  IMPORT: meat
  EXPORT: NONE
    IF meat.getStorageTemp<-- NONE > -27.0 AND meat.getStorageTemp<-- NONE < -5.0
      IF freezerCount < storageArray[1].length
        storageArray[1][freezerCount] = meat
        freezerCount = freezerCount + 1
      END IF
    ELSE IF meat.getStorageTemp<-- NONE > -2.0 AND meat.getStorageTemp<-- NONE < 6.0
      IF fridgeCount < storageArray[0].length
        storageArray[0][fridgeCount] = meat
        fridgeCount = fridgeCount + 1
      END IF
    ELSE IF meat.getStorageTemp<-- NONE > 8.0 AND meat.getStorageTemp <-- NONE < 25.0
      IF pantryCount < storageArray[2].length
        storageArray[2][pantryCount] = meat
        pantryCount = pantryCount + 1
      END IF
    ELSE
      OUTPUT("cannot add item to any storage location, storage temp is out of range or storage location is full")
    END IF
  END SUBMODULE

  SUBMODULE addFood
  IMPORT: grain
  EXPORT: NONE
    IF grain.getStorageTemp<-- NONE > -27.0 AND grain.getStorageTemp<-- NONE < -5.0
      IF freezerCount < storageArray[1].length
        storageArray[1][freezerCount] = grain
        freezerCount = freezerCount + 1
      END IF
    ELSE IF grain.getStorageTemp<-- NONE > -2.0 AND grain.getStorageTemp<-- NONE < 6.0
      IF fridgeCount < storageArray[0].length
        storageArray[0][fridgeCount] = grain
        fridgeCount = fridgeCount + 1
      END IF
    ELSE IF grain.getStorageTemp<-- NONE > 8.0 AND grain.getStorageTemp <-- NONE < 25.0
      IF pantryCount < storageArray[2].length
        storageArray[2][pantryCount] = grain
        pantryCount = pantryCount + 1
      END IF
    ELSE
      OUTPUT("cannot add item to any storage location, storage temp is out of range or storage location is full")
    END IF
  END SUBMODULE

  SUBMODULE addFood
  IMPORT: fruit
  EXPORT: NONE
    IF fruit.getStorageTemp<-- NONE > -27.0 AND fruit.getStorageTemp<-- NONE < -5.0
      IF freezerCount < storageArray[1].length
        storageArray[1][freezerCount] = fruit
        freezerCount = freezerCount + 1
      END IF
    ELSE IF fruit.getStorageTemp<-- NONE > -2.0 AND fruit.getStorageTemp<-- NONE < 6.0
      IF fridgeCount < storageArray[0].length
        storageArray[0][fridgeCount] = fruit
        fridgeCount = fridgeCount + 1
      END IF
    ELSE IF fruit.getStorageTemp<-- NONE > 8.0 AND fruit.getStorageTemp <-- NONE < 25.0
      IF pantryCount < storageArray[2].length
        storageArray[2][pantryCount] = fruit
        pantryCount = pantryCount + 1
      END IF
    ELSE
      OUTPUT("cannot add item to any storage location, storage temp is out of range or storage location is full")
    END IF
  END SUBMODULE

  SUBMODULE addFood
  IMPORT: vegetables
  EXPORT: NONE
    IF vegetables.getStorageTemp<-- NONE > -27.0 AND vegetables.getStorageTemp<-- NONE < -5.0
      IF freezerCount < storageArray[1].length
        storageArray[1][freezerCount] = vegetables
        freezerCount = freezerCount + 1
      END IF
    ELSE IF vegetables.getStorageTemp<-- NONE > -2.0 AND vegetables.getStorageTemp<-- NONE < 6.0
      IF fridgeCount < storageArray[0].length
        storageArray[0][fridgeCount] = vegetables
        fridgeCount = fridgeCount + 1
      END IF
    ELSE IF vegetables.getStorageTemp<-- NONE > 8.0 AND vegetables.getStorageTemp <-- NONE < 25.0
      IF pantryCount < storageArray[2].length
        storageArray[2][pantryCount] = vegetables
        pantryCount = pantryCount + 1
      END IF
    ELSE
      OUTPUT("cannot add item to any storage location, storage temp is out of range or storage location is full")
    END IF
  END SUBMODULE








